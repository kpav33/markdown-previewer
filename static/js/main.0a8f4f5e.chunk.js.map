{"version":3,"sources":["App.js","index.js"],"names":["defaultText","App","useState","text","setText","fullScr","setFullScr","fullScrEditor","setFullScrEditor","fullScrPreview","setFullScrPreview","marked","setOptions","breaks","test","className","style","gridTemplate","id","display","class","onClick","prevState","onChange","e","value","target","ReactHtmlParser","ReactDOM","render","document","getElementById"],"mappings":"oOA0FA,IAAMA,EAAW,iuEAwDFC,EA3If,WAAgB,IAAD,EACWC,mBAASF,GADpB,mBACNG,EADM,KACAC,EADA,OAEiBF,oBAAS,GAF1B,mBAENG,EAFM,KAEGC,EAFH,OAG6BJ,oBAAS,GAHtC,mBAGNK,EAHM,KAGSC,EAHT,OAI+BN,oBAAS,GAJxC,mBAINO,EAJM,KAIUC,EAJV,KA4BbC,IAAOC,WAAW,CAAEC,QAAQ,IAC5B,IAAIC,EAAOH,IAAOR,GAElB,OACE,sBAAKY,UAAU,UAAUC,MAAOX,EA1BV,CACtBY,aAAc,aAyB8C,KAA5D,UACE,sBACEC,GAAG,OACHH,UAAU,QACVC,MAAO,CAAEG,QAASV,EAAiB,OAAS,QAH9C,UAKE,sBAAKM,UAAU,SAAf,UACE,sBAAKA,UAAU,QAAf,UACE,mBAAGK,MAAM,mBADX,YAIA,wBAAQC,QAhChB,WACEb,GAAiB,SAACc,GAAD,OAAgBA,KACjChB,GAAW,SAACgB,GAAD,OAAgBA,MA8BrB,SACGf,EACC,mBAAGa,MAAM,4BAET,mBAAGA,MAAM,4BAIf,0BACEG,SA7BR,SAAsBC,GAAI,IAChBC,EAAUD,EAAEE,OAAZD,MACRrB,EAAQqB,IA4BFA,MAAOtB,EACPe,GAAG,SACHH,UAAU,gBAGd,sBACEG,GAAG,gBACHH,UAAU,QACVC,MAAO,CAAEG,QAASZ,EAAgB,OAAS,QAH7C,UAKE,sBAAKQ,UAAU,SAAf,UACE,sBAAKA,UAAU,QAAf,UACE,mBAAGK,MAAM,wBADX,eAGA,wBAAQC,QAlDhB,WACEX,GAAkB,SAACY,GAAD,OAAgBA,KAClChB,GAAW,SAACgB,GAAD,OAAgBA,MAgDrB,SACGb,EACC,mBAAGW,MAAM,4BAET,mBAAGA,MAAM,4BAIf,qBAAKF,GAAG,UAAUH,UAAU,UAA5B,SACGY,YAAgBb,YC9E3Bc,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.0a8f4f5e.chunk.js","sourcesContent":["// import \"./App.css\";\nimport \"./styles.scss\";\nimport React, { useState } from \"react\";\n\nimport marked from \"marked\";\nimport ReactHtmlParser from \"html-react-parser\";\n\nfunction App() {\n  const [text, setText] = useState(defaultText);\n  const [fullScr, setFullScr] = useState(false);\n  const [fullScrEditor, setFullScrEditor] = useState(false);\n  const [fullScrPreview, setFullScrPreview] = useState(false);\n\n  const fullScreenStyle = {\n    gridTemplate: \"1fr / 1fr\",\n  };\n\n  // Handles full screen change and back to normal view for editor\n  function changeEditor() {\n    setFullScrEditor((prevState) => !prevState);\n    setFullScr((prevState) => !prevState);\n  }\n\n  // Handles full screen change and back to normal view for preview\n  function changePreview() {\n    setFullScrPreview((prevState) => !prevState);\n    setFullScr((prevState) => !prevState);\n  }\n\n  // Stores input into textarea to state\n  function handleChange(e) {\n    const { value } = e.target;\n    setText(value);\n  }\n\n  marked.setOptions({ breaks: true });\n  let test = marked(text);\n\n  return (\n    <div className=\"wrapper\" style={fullScr ? fullScreenStyle : null}>\n      <div\n        id=\"edit\"\n        className=\"panel\"\n        style={{ display: fullScrPreview ? \"none\" : \"grid\" }}\n      >\n        <div className=\"topbar\">\n          <div className=\"title\">\n            <i class=\"ri-pencil-line\"></i>\n            Editor\n          </div>\n          <button onClick={changeEditor}>\n            {fullScrEditor ? (\n              <i class=\"ri-fullscreen-exit-line\"></i>\n            ) : (\n              <i class=\"ri-fullscreen-line\"></i>\n            )}\n          </button>\n        </div>\n        <textarea\n          onChange={handleChange}\n          value={text}\n          id=\"editor\"\n          className=\"textarea\"\n        />\n      </div>\n      <div\n        id=\"preview-panel\"\n        className=\"panel\"\n        style={{ display: fullScrEditor ? \"none\" : \"grid\" }}\n      >\n        <div className=\"topbar\">\n          <div className=\"title\">\n            <i class=\"ri-file-search-line\"></i>Previewer\n          </div>\n          <button onClick={changePreview}>\n            {fullScrPreview ? (\n              <i class=\"ri-fullscreen-exit-line\"></i>\n            ) : (\n              <i class=\"ri-fullscreen-line\"></i>\n            )}\n          </button>\n        </div>\n        <div id=\"preview\" className=\"preview\">\n          {ReactHtmlParser(test)}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst defaultText = `# Markdown Previewer\n\nThis project was built as part of **freeCodeCamp Front End Libraries Projects**.\n\nYou can see the source code for this project in the [project's GitHub repository](https://github.com/kpav33/markdown-previewer) and you can read the instructions for the project on the [freeCodeCamp project page](https://www.freecodecamp.org/learn/front-end-libraries/front-end-libraries-projects/build-a-markdown-previewer).\n\nI've used [marked](https://github.com/markedjs/marked) together with [html-react-parser](https://github.com/remarkablemark/html-react-parser) to complete this project.\n\n# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes! Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce rhoncus nisl leo, eget porttitor eros fermentum vel. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\n>\n>> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce rhoncus nisl leo, eget porttitor eros fermentum vel. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\nAnother one. | Getting a bit long. | We should probably stop.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbered lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![freeCodeCamp Logo](https://upload.wikimedia.org/wikipedia/commons/3/39/FreeCodeCamp_logo.png)\n`;\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}