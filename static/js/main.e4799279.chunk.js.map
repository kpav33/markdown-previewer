{"version":3,"sources":["container/Context.js","defaultText.js","components/Topbar.js","components/Panel.js","components/Editor.js","components/Previewer.js","container/App.js","index.js"],"names":["Context","React","createContext","ContextProvider","children","useState","text","setText","fullScr","setFullScr","fullScrEditor","setFullScrEditor","fullScrPreview","setFullScrPreview","Provider","value","fullScreenStyle","gridTemplate","changeEditor","prevState","changePreview","handleChange","e","target","Topbar","props","className","class","icon","title","onClick","changeFunction","fullScreen","Panel","style","display","fullScrView","Editor","useContext","onChange","id","Previewer","marked","setOptions","breaks","markdown","ReactHtmlParser","App","ReactDOM","render","document","getElementById"],"mappings":"6MAKMA,EAAUC,IAAMC,gBAEtB,SAASC,EAAT,GAAwC,IAAbC,EAAY,EAAZA,SAAY,EACbC,mBCRT,kuEDOsB,mBAC9BC,EAD8B,KACxBC,EADwB,OAEPF,oBAAS,GAFF,mBAE9BG,EAF8B,KAErBC,EAFqB,OAGKJ,oBAAS,GAHd,mBAG9BK,EAH8B,KAGfC,EAHe,OAION,oBAAS,GAJhB,mBAI9BO,EAJ8B,KAIdC,EAJc,KA6BrC,OACE,cAACb,EAAQc,SAAT,CACEC,MAAO,CACLT,OACAE,UACAE,gBACAE,iBACAI,gBA7BkB,CACtBC,aAAc,aA6BVC,aAzBN,WACEP,GAAiB,SAACQ,GAAD,OAAgBA,KACjCV,GAAW,SAACU,GAAD,OAAgBA,MAwBvBC,cApBN,WACEP,GAAkB,SAACM,GAAD,OAAgBA,KAClCV,GAAW,SAACU,GAAD,OAAgBA,MAmBvBE,aAfN,SAAsBC,GAAI,IAChBP,EAAUO,EAAEC,OAAZR,MACRR,EAAQQ,KAIR,SAYGX,I,ME7BQoB,MAlBf,SAAgBC,GACd,OACE,sBAAKC,UAAU,SAAf,UACE,sBAAKA,UAAU,QAAf,UACE,mBAAGC,MAAOF,EAAMG,OACfH,EAAMI,SAET,wBAAQC,QAASL,EAAMM,eAAvB,SACGN,EAAMO,WACL,mBAAGL,MAAM,4BAET,mBAAGA,MAAM,6BCQJM,MAjBf,SAAeR,GACb,OACE,sBACEC,UAAU,QACVQ,MAAO,CAAEC,QAASV,EAAMW,YAAc,OAAS,QAFjD,UAIE,cAAC,EAAD,CACER,KAAMH,EAAMG,KACZC,MAAOJ,EAAMI,MACbE,eAAgBN,EAAMM,eACtBC,WAAYP,EAAMO,aAEnBP,EAAMrB,aCWEiC,MAtBf,WAAmB,IAAD,EAEdC,qBAAWtC,GADLY,EADQ,EACRA,eAAgBM,EADR,EACQA,aAAcR,EADtB,EACsBA,cAAeW,EADrC,EACqCA,aAAcf,EADnD,EACmDA,KAGnE,OACE,cAAC,EAAD,CACE8B,YAAaxB,EACbmB,eAAgBb,EAChBc,WAAYtB,EACZkB,KAAK,iBACLC,MAAM,SALR,SAOE,0BACEU,SAAUlB,EACVN,MAAOT,EACPkC,GAAG,SACHd,UAAU,gB,wBCSHe,MAtBf,WAAsB,IAAD,EAEjBH,qBAAWtC,GADLY,EADW,EACXA,eAAgBQ,EADL,EACKA,cAAeV,EADpB,EACoBA,cAAeJ,EADnC,EACmCA,KAGtDoC,IAAOC,WAAW,CAAEC,QAAQ,IAC5B,IAAIC,EAAWH,IAAOpC,GAEtB,OACE,cAAC,EAAD,CACE8B,YAAa1B,EACbqB,eAAgBX,EAChBY,WAAYpB,EACZgB,KAAK,sBACLC,MAAM,YALR,SAOE,qBAAKW,GAAG,UAAUd,UAAU,UAA5B,SACGoB,YAAgBD,QCNVE,MAXf,WAAgB,IAAD,EACwBT,qBAAWtC,GAAxCQ,EADK,EACLA,QAASQ,EADJ,EACIA,gBAEjB,OACE,sBAAKU,UAAU,UAAUQ,MAAO1B,EAAUQ,EAAkB,KAA5D,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCPNgC,IAASC,OACP,cAAC9C,EAAD,UACE,cAAC,EAAD,MAEF+C,SAASC,eAAe,W","file":"static/js/main.e4799279.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport defaultText from \"../defaultText\";\n\n// Create Context\nconst Context = React.createContext();\n\nfunction ContextProvider({ children }) {\n  const [text, setText] = useState(defaultText);\n  const [fullScr, setFullScr] = useState(false);\n  const [fullScrEditor, setFullScrEditor] = useState(false);\n  const [fullScrPreview, setFullScrPreview] = useState(false);\n\n  // Styles to use when user wants to fullscreen one of the panels\n  const fullScreenStyle = {\n    gridTemplate: \"1fr / 1fr\",\n  };\n\n  // Handles full screen change and back to normal view for editor\n  function changeEditor() {\n    setFullScrEditor((prevState) => !prevState);\n    setFullScr((prevState) => !prevState);\n  }\n\n  // Handles full screen change and back to normal view for preview\n  function changePreview() {\n    setFullScrPreview((prevState) => !prevState);\n    setFullScr((prevState) => !prevState);\n  }\n\n  // Stores input from textarea to state\n  function handleChange(e) {\n    const { value } = e.target;\n    setText(value);\n  }\n\n  return (\n    <Context.Provider\n      value={{\n        text,\n        fullScr,\n        fullScrEditor,\n        fullScrPreview,\n        fullScreenStyle,\n        changeEditor,\n        changePreview,\n        handleChange,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  );\n}\n\nexport { ContextProvider, Context };\n","const defaultText = `# Markdown Previewer\n\nThis project was built as part of **freeCodeCamp Front End Libraries Projects**.\n\nYou can see the source code for this project in the [project's GitHub repository](https://github.com/kpav33/markdown-previewer) and you can read the instructions for the project on the [freeCodeCamp project page](https://www.freecodecamp.org/learn/front-end-libraries/front-end-libraries-projects/build-a-markdown-previewer).\n\nI've used [marked](https://github.com/markedjs/marked) together with [html-react-parser](https://github.com/remarkablemark/html-react-parser) to complete this project.\n\n# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes! Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce rhoncus nisl leo, eget porttitor eros fermentum vel. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\n>\n>> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce rhoncus nisl leo, eget porttitor eros fermentum vel. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\nAnother one. | Getting a bit long. | We should probably stop.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbered lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![freeCodeCamp Logo](https://upload.wikimedia.org/wikipedia/commons/3/39/FreeCodeCamp_logo.png)\n`;\n\nexport default defaultText;\n","import React from \"react\";\n\nfunction Topbar(props) {\n  return (\n    <div className=\"topbar\">\n      <div className=\"title\">\n        <i class={props.icon}></i>\n        {props.title}\n      </div>\n      <button onClick={props.changeFunction}>\n        {props.fullScreen ? (\n          <i class=\"ri-fullscreen-exit-line\"></i>\n        ) : (\n          <i class=\"ri-fullscreen-line\"></i>\n        )}\n      </button>\n    </div>\n  );\n}\n\nexport default Topbar;\n","import React from \"react\";\n\nimport Topbar from \"./Topbar\";\n\nfunction Panel(props) {\n  return (\n    <div\n      className=\"panel\"\n      style={{ display: props.fullScrView ? \"none\" : \"grid\" }}\n    >\n      <Topbar\n        icon={props.icon}\n        title={props.title}\n        changeFunction={props.changeFunction}\n        fullScreen={props.fullScreen}\n      />\n      {props.children}\n    </div>\n  );\n}\n\nexport default Panel;\n","import React, { useContext } from \"react\";\nimport { Context } from \"../container/Context\";\n\nimport Panel from \"./Panel\";\n\nfunction Editor() {\n  const { fullScrPreview, changeEditor, fullScrEditor, handleChange, text } =\n    useContext(Context);\n\n  return (\n    <Panel\n      fullScrView={fullScrPreview}\n      changeFunction={changeEditor}\n      fullScreen={fullScrEditor}\n      icon=\"ri-pencil-line\"\n      title=\"Editor\"\n    >\n      <textarea\n        onChange={handleChange}\n        value={text}\n        id=\"editor\"\n        className=\"textarea\"\n      />\n    </Panel>\n  );\n}\n\nexport default Editor;\n","import React, { useContext } from \"react\";\nimport { Context } from \"../container/Context\";\n\nimport Panel from \"./Panel\";\n\nimport marked from \"marked\";\nimport ReactHtmlParser from \"html-react-parser\";\n\nfunction Previewer() {\n  const { fullScrPreview, changePreview, fullScrEditor, text } =\n    useContext(Context);\n\n  marked.setOptions({ breaks: true });\n  let markdown = marked(text);\n\n  return (\n    <Panel\n      fullScrView={fullScrEditor}\n      changeFunction={changePreview}\n      fullScreen={fullScrPreview}\n      icon=\"ri-file-search-line\"\n      title=\"Previewer\"\n    >\n      <div id=\"preview\" className=\"preview\">\n        {ReactHtmlParser(markdown)}\n      </div>\n    </Panel>\n  );\n}\n\nexport default Previewer;\n","import \"../styles.scss\";\nimport React, { useContext } from \"react\";\nimport { Context } from \"./Context\";\n\nimport Editor from \"../components/Editor\";\nimport Previewer from \"../components/Previewer\";\n\nfunction App() {\n  const { fullScr, fullScreenStyle } = useContext(Context);\n\n  return (\n    <div className=\"wrapper\" style={fullScr ? fullScreenStyle : null}>\n      <Editor />\n      <Previewer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ContextProvider } from \"./container/Context\";\n\nimport App from \"./container/App\";\n\nReactDOM.render(\n  <ContextProvider>\n    <App />\n  </ContextProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}